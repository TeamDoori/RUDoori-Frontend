import React, { useState, useEffect, useContext } from "react";
import {
  View,
  Text,
  StyleSheet,
  Button,
  FlatList,
  TouchableOpacity,
  TextInput,
  Alert,
  Image,
  RefreshControl,
} from "react-native";
import { API_URL } from "@env";
// import { UserContext } from "../../contexts";
// import { useFocusEffect } from "@react-navigation/native";
import { useSelector, useDispatch } from "react-redux";
import { getBoardInfo, initialBoardList } from "../../redux/slice/BoardSlice";

const MainGet = ({ navigation, route }) => {
  const [search, setSearch] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const accessToken = useSelector((state) => state.user.security.accessToken);
  const dispatch = useDispatch();

  const [page, setPage] = useState(0);
  const [isRefreshing, setIsRefreshing] = useState(false);

  const boardList = useSelector((state) => state.board.boardList);

  const handleRefresh = () => {
    setIsRefreshing(true); // 새로고침 시작 시 상태 변경
    fetchInitialData(); // 데이터 로드 함수 호출
    setIsRefreshing(false); // 새로고침 완료 시 상태 변경
  };

  useEffect(() => {
    dispatch(initialBoardList());
    fetchInitialData();
  }, []);

  const fetchInitialData = () => {
    const getBoardInput = { page: 0, accessToken };
    dispatch(initialBoardList());
    dispatch(getBoardInfo({ getBoardInput }));
  };

  const fetchMoreData = () => {
    if (!isLoading) {
      setIsLoading(true);

      const nextPage = page + 1; // 다음 페이지 번호 계산
      const getBoardInput = { page: nextPage, accessToken };

      dispatch(getBoardInfo({ getBoardInput }));
      setPage(nextPage); // 페이지 번호 갱신

      setIsLoading(false);
    }
  };

  const _handleSearchButtonPress = () => {
    navigation.navigate("SearchBoard", search);
  };

  const renderItem = ({ item }) => {
    // console.log("=======item==========start");
    // console.log(item);
    // console.log("=======item==========end");
    return (
      <TouchableOpacity
        onPress={() =>
          navigation.navigate("Detail", { item, pageInfo: "CommonBoard" })
        }
      >
        <View style={styles.item}>
          <Text>포스트아이디: {item.postId}</Text>
          <Text>글쓴이: {item.writer}</Text>
          <Text>생성날짜: {item.createdDt}</Text>
          <Text>제목: {item.title}</Text>
          <Text>내용: {item.content}</Text>
        </View>
      </TouchableOpacity>
    );
  };

  // const ItemSeparator = () => <View style={styles.separator} />;

  return (
    // <ScrollView onScroll={handleScroll} scrollEventThrottle={16}>
    <View>
      <View style={styles.searchContainer}>
        <View style={styles.row}>
          <TextInput
            style={styles.searchText}
            placeholder="검색"
            value={search}
            onChangeText={(text) => setSearch(text)}
          />
        </View>

        <TouchableOpacity onPress={_handleSearchButtonPress}>
          <Image
            source={{
              uri: "https://play-lh.googleusercontent.com/WL9oSrJxfO6XDrSnuERVcjFXN--XztDibPGtAxIJsJBfm2ZAv4WvkR5yFuOcFKKR0_A=w240-h480-rw",
            }}
            style={styles.image}
          />
        </TouchableOpacity>
      </View>

      <View style={styles.textContainer}>
        <TouchableOpacity onPress={() => navigation.navigate("Write")}>
          <Text style={styles.text}> 글쓰기</Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={boardList}
        renderItem={renderItem}
        keyExtractor={(item) => item.postId.toString()}
        onEndReached={fetchMoreData}
        onEndReachedThreshold={0.8}
        ItemSeparatorComponent={() => <View style={{ height: 10 }} />} // 아이템 사이 간격을 설정합니다.
        refreshControl={
          <RefreshControl refreshing={isRefreshing} onRefresh={handleRefresh} />
        }
      />
    </View>
  );
};

const styles = StyleSheet.create({
  searchContainer: {
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
    backgroundColor: "#ddd",
  },
  //   borderColor: "#ccc",
  item: {
    padding: 20,
    marginVertical: 8,
    marginHorizontal: 16,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 5,
    padding: 10,
    width: "80%",
    marginBottom: 20,
  },
  button: {
    margin: 0,
    padding: 0,
  },
  textContainer: {
    // position: "absolute",
    alignItems: "center",
    marginBottom: 20,
    padding: 10,
    margin: 20,
    borderColor: "gray",
    backgroundColor: "white",
  },
  row: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20, // 왼쪽과 오른쪽에 여백을 주기 위해 추가
  },
  searchText: {
    width: 1700,
    height: 40,
    borderColor: "gray",
    paddingHorizontal: 10,
  },
  image: {
    width: 50,
    height: 50,
    resizeMode: "contain",
  },
  separator: {
    height: 1,
    backgroundColor: "black", // 검정색으로 구분선 설정
  },
});

export default MainGet;
